// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: plants.sql

package database

import (
	"context"
)

const createPlant = `-- name: CreatePlant :one
INSERT INTO plants (name, userId) VALUES ($1, $2)
RETURNING id, name, userid
`

type CreatePlantParams struct {
	Name   string
	Userid int64
}

func (q *Queries) CreatePlant(ctx context.Context, arg CreatePlantParams) (Plant, error) {
	row := q.db.QueryRow(ctx, createPlant, arg.Name, arg.Userid)
	var i Plant
	err := row.Scan(&i.ID, &i.Name, &i.Userid)
	return i, err
}

const getPlantById = `-- name: GetPlantById :one
SELECT id, name, userid FROM plants WHERE id = $1
`

func (q *Queries) GetPlantById(ctx context.Context, id int64) (Plant, error) {
	row := q.db.QueryRow(ctx, getPlantById, id)
	var i Plant
	err := row.Scan(&i.ID, &i.Name, &i.Userid)
	return i, err
}

const getPlantsByUserId = `-- name: GetPlantsByUserId :many
SELECT id, name, userid FROM plants WHERE userId = $1
`

func (q *Queries) GetPlantsByUserId(ctx context.Context, userid int64) ([]Plant, error) {
	rows, err := q.db.Query(ctx, getPlantsByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plant
	for rows.Next() {
		var i Plant
		if err := rows.Scan(&i.ID, &i.Name, &i.Userid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlant = `-- name: UpdatePlant :one
UPDATE plants
SET name = $2
WHERE id = $1
RETURNING id, name, userid
`

type UpdatePlantParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdatePlant(ctx context.Context, arg UpdatePlantParams) (Plant, error) {
	row := q.db.QueryRow(ctx, updatePlant, arg.ID, arg.Name)
	var i Plant
	err := row.Scan(&i.ID, &i.Name, &i.Userid)
	return i, err
}
